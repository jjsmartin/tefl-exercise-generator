import React from 'react'
import { useState, useRef, useEffect } from "react";
import { Heading, Box, Flex, Button, Text, Textarea, FormControl, FormLabel, Input, Select, Stack, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Link } from "@chakra-ui/react";
// import grammarOptions from '../data/grammarOptions';
// import { getGrammarGapFill } from "../api/getGrammarGapFill";

function App() {

  let [prompt, setPrompt] = useState("");
  let [isLoading, setIsLoading] = useState(false);
  let [result, setResult] = useState("");
  const [grammar, setGrammar] = useState("");
  const [topic, setTopic] = useState("");
  const [numQuestions, setNumQuestions] = useState(1);

  const resultRef = useRef();
  useEffect(() => {
    resultRef.current = result;
  }, [result]);

  const handleSubmitButtonClicked = (e) => {

    e.preventDefault();
    setIsLoading(true);
    setResult("");

    const formData = {
      topic: topic,
      grammar: grammar,
      numQuestions: numQuestions,
    };
    
    console.log(formData);

    let response = fetch("http://localhost:8888", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        formData
      })
    })
    .then(response => response.json())
    .then(data => {
      setResult(data);
      setIsLoading(false);
    })
    .catch(error => console.error('Error:', error));

  };

  let handleClearButtonClicked = () => {
  setPrompt("");
  setResult("");
  setIsLoading(false);
  };


  // const formattedGrammarOptions = grammarOptions.map(group => {
  //   const newGroup = {...group}; // Copy the group to avoid mutating the original
  //   newGroup.options = group.options.map(option => {
  //     const newOption = {...option}; // Copy the option to avoid mutating the original
  //     newOption.value = option.value.toLowerCase()
  //       .replace(/[^a-z0-9]/g, '-') // replace any character not a letter or digit with -
  //       .replace(/-+/g, '-') // replace consecutive - with a single -
  //       .replace(/^-|-$/g, ''); // remove - at the start and end of the string
  //     return newOption;
  //   });
  //   return newGroup;
  // });
  const grammarOptions = ['past continuous'];

  return (
    <Box>
      <Heading
        as="h1"
        textAlign="center"
        fontSize="5xl"
        mt="50px"
        mb="10px"
        color="orange.500"
      >
        TEFL Exercise Generator
      </Heading>

      <Text textAlign="center" mt={2} mb="50px">
        Infinite TEFL exercises, generated by Chat GPT.<br></br>
        Grammar categories taken from <Link color="blue.500" href="https://learnenglish.britishcouncil.org/grammar"> https://learnenglish.britishcouncil.org</Link>
      </Text>

      <Flex>
        <Box w="25%" h="100%" p={4}>
          <form onSubmit={handleSubmitButtonClicked}>
            <Stack spacing={5}>

              {/* <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold">Grammar:</FormLabel>
                <Select placeholder="Select grammar" onChange={(e) => setGrammar(e.target.value)}>
                  {grammarOptions.map((group, i) => (
                    <optgroup key={i} label={group.group}>
                      {group.options.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </optgroup>
                  ))}
                </Select>
              </FormControl> */}

              <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold" >Topic:</FormLabel>
                <Input type="text" placeholder="Type anything at all..." autoComplete="off" value={topic} onChange={(e) => setTopic(e.target.value)} />
              </FormControl>

              <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold">How many questions (max 10)?</FormLabel>
                <NumberInput min={1} max={10} defaultValue={1} onChange={(e) => setNumQuestions(e)}>
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>

            </Stack>
          </form>

          <Button
            colorScheme="teal"
            size="lg"
            mt="30px"
            ml="20px"
            onClick={handleSubmitButtonClicked}
            isLoading={isLoading}
            loadingText="Generating Exercise"
          >
            Submit
          </Button>

          <Button
            colorScheme="teal"
            size="lg"
            mt="30px"
            ml="20px"
            onClick={handleClearButtonClicked}
          >
            Clear
          </Button>

        </Box>

        <Box w="75%" p={4}>

          <Box p={1}>
            <Textarea value={result} height="1200px" fontSize="lg" textAlign="left" mt="10px" isReadOnly={true} />
          </Box>

        </Box>
      </Flex>
    </Box>

  );
}

export default App;