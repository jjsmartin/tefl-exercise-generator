import { useState, useRef, useEffect } from "react";
import { Heading, Box, Flex, Button, Text, Textarea, FormControl, FormLabel, Input, Select, Stack, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Link } from "@chakra-ui/react";
import grammarOptions from '../data/grammarOptions';
import { getGrammarGapFill } from "../api/getGrammarGapFill";

function App() {

  let [prompt, setPrompt] = useState("");
  let [isLoading, setIsLoading] = useState(false);
  let [result, setResult] = useState("");
  const [grammar, setGrammar] = useState("");
  const [topic, setTopic] = useState("");
  const [numQuestions, setNumQuestions] = useState(1);

  const resultRef = useRef();
  useEffect(() => {
    resultRef.current = result;
  }, [result]);

  const handleSubmitButtonClicked = (e) => {

    e.preventDefault();
    setIsLoading(true);
    setResult("");

    const formData = {
      topic: topic,
      grammar: grammar,
      numQuestions: numQuestions,
    };

    console.log(formData);

    getGrammarGapFill(formData).then(results => {
      setResult(results);
      setIsLoading(false);
    })
  };

  let handleClearButtonClicked = () => {
    setPrompt("");
    setResult("");
    setIsLoading(false);
  };

  return (
    <Box>
      <Heading
        as="h1"
        textAlign="center"
        fontSize="5xl"
        mt="50px"
        mb="10px"
        color="orange.500"
      >
        TEFL Exercise Generator
      </Heading>

      <Text textAlign="center" mt={2} mb="50px">
        Infinite TEFL exercises, generated by Chat GPT.<br></br>
        Grammar categories taken from <Link color="blue.500" href="https://learnenglish.britishcouncil.org/grammar"> https://learnenglish.britishcouncil.org</Link>
      </Text>

      <Flex>
        <Box w="25%" h="100%" p={4}>
          <form onSubmit={handleSubmitButtonClicked}>
            <Stack spacing={5}>

              <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold">Grammar:</FormLabel>
                <Select placeholder="Select grammar" onChange={(e) => setGrammar(e.target.value)}>
                  {grammarOptions.map((group, i) => (
                    <optgroup key={i} label={group.group}>
                      {group.options.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </optgroup>
                  ))}
                </Select>
              </FormControl>

              <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold" >Topic:</FormLabel>
                <Input type="text" placeholder="Type anything at all..." autoComplete="off" value={topic} onChange={(e) => setTopic(e.target.value)} />
              </FormControl>

              <FormControl mt={4}>
                <FormLabel fontSize="lg" fontWeight="bold">How many questions (max 10)?</FormLabel>
                <NumberInput min={1} max={10} defaultValue={1} onChange={(e) => setNumQuestions(e)}>
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>

            </Stack>
          </form>

          <Button
            colorScheme="teal"
            size="lg"
            mt="30px"
            ml="20px"
            onClick={handleSubmitButtonClicked}
            isLoading={isLoading}
            loadingText="Generating Exercise"
          >
            Submit
          </Button>

          <Button
            colorScheme="teal"
            size="lg"
            mt="30px"
            ml="20px"
            onClick={handleClearButtonClicked}
          >
            Clear
          </Button>

        </Box>

        <Box w="75%" border="1px" borderColor="gray.200" p={4}>

          <Box p={1}>
            <Textarea value={result} height="1200px" fontSize="lg" textAlign="left" mt="10px" isReadOnly={true} />
          </Box>

        </Box>
      </Flex>
    </Box>

  );
}

export default App;

// TODO figure out what to do with the API key when deploying to production
// TODO the prompts need to be improved massively -- they do not reliably focus on the right grammar. Should I supply examples?


/*

A "gap-fill exercise" is a common technique used in language teaching, particularly in teaching English as a foreign language (EFL).

In a gap-fill exercise, students are given sentences or a paragraph where certain words (or phrases) are missing. These missing words are indicated by blanks, or "gaps," hence the name. The students' task is to fill in these gaps with appropriate words or phrases.

Gap-fill exercises are effective as they engage learners actively, test their comprehension, and provide teachers with an opportunity to assess learning. They are a versatile tool that can be easily integrated into a variety of lesson plans.

You will create a gap-full exercise which be used to practice specific grammatical structures.

When creating a gap-fill exercise focused on grammar, it's important to carefully plan the exercise to ensure that it effectively teaches and tests the grammatical point you're targeting. Here are some points to consider:

Identify the specific grammar point: First, you need to decide what grammar point you want the exercise to focus on. This could be a particular verb tense, preposition, article, modal verb, etc. The exercise should be designed in a way that only this specific grammar point fits the gaps.

Contextual relevance: It's important to create sentences that are contextually relevant and make sense. It not only makes the exercise more engaging, but it also helps students understand how the grammar point is used in real-world communication.

Use clear and understandable sentences: The sentences should be at a suitable level for your students. They should be able to understand the sentence as a whole, with the exception of the targeted grammar point.

Provide a balanced challenge: The exercise shouldn't be too easy, or it won't be an effective learning tool. But it also shouldn't be so difficult that it frustrates the students. You want to challenge them just enough to stretch their abilities without discouraging them.

Include distractors: Distractors are incorrect options that could logically fill the gap but do not fit the context or grammar rule being applied. They are effective in ensuring that students aren't just guessing the answer and truly understand the grammar.

Provide enough practice opportunities: One or two sentences won't be enough for students to practice and internalize a new grammar point. You'll want to create an exercise with a sufficient number of examples.

Include variations: If you're teaching a grammar point that has different forms or uses, include examples of these variations in your exercise. This can help students understand the grammar point in a more comprehensive way.

Review and Feedback: After students have completed the exercise, go through the answers as a class. This gives you a chance to correct any mistakes, clear up any confusion, and provide further explanations if necessary.

By paying attention to these points, you can create a gap-fill exercise that effectively teaches the grammar point you're focusing on, giving your students an opportunity to practice and understand the grammar concept in a meaningful context.

Taking into account this backgroups, generate a sentence of around 20 words that can be used to practice this grammatical construction: 
"{grammar}".

We will call this the "target grammar".

The sentence should also relate to this topic:
"{topic}"

You should return {numQuestions} different gap fill exercises in the format described below. Do not use the same correct option more than once.
{format_instructions}
*/